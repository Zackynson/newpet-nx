name: Build and run CDK Deploy/Diff ðŸš€

inputs:
  deployment-type:
    description: "The deployment type. Should be 'all' or 'affected'. Default: 'all'."
    required: true
    type: choice
    options:
    - all
    - affected
    default: 'all'
  cdk-subcommand:
    description: "Either deploy or diff to be passed into the CDK action."
    required: true
    type: choice
    options:
    - deploy
    - diff
    default: 'deploy'
  base-ref:
    description: "Base ref (SHA/name) used to build and register the Deployment"
    required: false
    type: string
  head-ref:
    description: "Base head (SHA/name) used to build and register the Deployment"
    required: false
    type: string
  aws-access-key-id:
    required: true
    type: string
  aws-secret-access-key:
    required: true
    type: string
  region-glob:
    description: "Glob expression to select CDK's target regions"
    required: false
    type: string
    default: '*'
  stack-glob:
    description: "Glob expression to select target stacks"
    required: false
    type: string
    default: '*'
  override-stage:
    description: "Input to override the STAGE the if infered from the base-ref"
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Cache node modules
      id: cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: cache-node-modules-${{ hashFiles('package-lock.json') }}

    - name: Node.js setup and install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/setup-node@v3
      with:
        node-version: 16.17.1 # We pin a specific version to avoid any problems with NPM
        cache: 'npm'

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci

    - name: Infer Deploy Stage
      id: vars
      uses: ./.github/actions/get-deploy-stage
      with:
        base-ref: ${{ inputs.base-ref }}

    - name: Select Stage
      id: stage
      shell: bash
      run: echo "STAGE=${{ inputs.override-stage || steps.vars.outputs.STAGE }}" >> $GITHUB_OUTPUT

    - name: Output Deployment Info
      env:
        DEPLOYMENT_TYPE: ${{ inputs.deployment-type }}
        STAGE: ${{ steps.stage.outputs.STAGE }}
      shell: bash
      run: |
        echo "::debug::STAGE: $STAGE"
        echo "::debug::DEPLOYMENT TYPE: $DEPLOYMENT_TYPE"

    - name: Convert Base/Head Refs
      id: convert_refs
      shell: bash
      run: |
        BASE=$(if [[ -z "${{ inputs.base-ref }}" ]]; then echo "$GITHUB_SHA~1"; else echo "origin/${{ inputs.base-ref }}"; fi)
        HEAD=$(if [[ -z "${{ inputs.head-ref }}" ]]; then echo $GITHUB_SHA; else echo "origin/${{ inputs.head-ref }}"; fi)
        echo "base-ref=$BASE" >> $GITHUB_OUTPUT
        echo "head-ref=$HEAD" >> $GITHUB_OUTPUT
        echo "::debug::Base ref: $BASE"
        echo "::debug::Head ref: $HEAD"

    - name: Build projects
      env:
        TYPE: ${{ inputs.deployment-type }}
        NX_BASE: ${{ steps.convert_refs.outputs.base-ref }}
        NX_HEAD: ${{ steps.convert_refs.outputs.head-ref }}
      shell: bash
      run: npm run build:$TYPE

    - name: Install packages for the projects
      env:
        TYPE: ${{ inputs.deployment-type }}
        NX_BASE: ${{ steps.convert_refs.outputs.base-ref }}
        NX_HEAD: ${{ steps.convert_refs.outputs.head-ref }}
      shell: bash
      run: npm run install-deps:$TYPE

    - name: Register projects for deploy
      env:
        STAGE: ${{ steps.stage.outputs.STAGE }}
        TYPE: ${{ inputs.deployment-type }}
        REGION: ${{ inputs.region-glob }}
        STACK_GLOB: ${{ inputs.stack-glob }}
        NX_BASE: ${{ steps.convert_refs.outputs.base-ref }}
        NX_HEAD: ${{ steps.convert_refs.outputs.head-ref }}
      shell: bash
      run: npm run register-deploy:$TYPE

    - name: Join projects registered for deployment
      id: deploy_stacks
      shell: bash
      run: |
        STACKS=$(grep -vE "^(#|\s)" .cdk-deploy-registered | grep '\S' | paste -sd "|" - | awk '{print "@("$1")"}')
        echo "STACKS=$STACKS" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1

    - name: Bootstrap CDK
      shell: bash
      run: |
        #!/bin/env bash
        STAGE=$(echo $STAGE | awk '{print tolower($0)}')
        AWS_ACCOUNT=$(jq -r ".context.$STAGE.account" cdk.json)

        # Run the bootstrap command for every region
        jq -cr ".context.$STAGE.regions[]" cdk.json |\
        awk -v AWS_ACCOUNT=$AWS_ACCOUNT '{ print AWS_ACCOUNT "/" $1 }' |\
        npx cdk bootstrap
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_DEFAULT_REGION: 'us-east-1'
        STAGE: ${{ steps.stage.outputs.STAGE }}

    - name: Run CDK Action
      uses: youyo/aws-cdk-github-actions@v2
      with:
        cdk_subcommand: ${{ inputs.cdk-subcommand }}
        cdk_args: '--exclusively --require-approval never --concurrency 10'
        cdk_stack: ${{ steps.deploy_stacks.outputs.STACKS }}
        actions_comment: false
        debug_log: true
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_DEFAULT_REGION: 'us-east-1'
        STAGE: ${{ steps.stage.outputs.STAGE }}
